#ifndef GS_418H_H_
#define GS_418H_H_

/**
 * AUTOGENERATED BY gen_unions.py
*/
#include <stdint.h>

#define GS_418_ID 0x0418



enum class GS_418H_FSC {
    BLANK = 32, /** Blank ("") */
    ONE = 49, /** speed step "1" */
    TWO = 50, /** speed step "2" */
    THREE = 51, /** speed step "3" */
    FOUR = 52, /** speed step "4" */
    FUENF = 53, /** speed step "5" */
    SIX = 54, /** speed step "6" */
    SEVEN = 55, /** speed step "7" */
    A = 65, /** speed level "A" */
    D = 68, /** speed step "D" */
    F = 70, /**  error mark "F" */
    N = 78, /** speed step "N" */
    P = 80, /** speed step "P" */
    R = 82, /** speed step "R" */
    SNV = 255, /** Passive value */
};

enum class GS_418H_FPC {
    C_MGFB_WT = 2, /** "C", message "gear, actuate parking brake!" with warning tone */
    C_MGSNN = 3, /** "C", message "Shift gear, shift lever to N!" */
    C_MGBB = 4, /** "C", message "gear, apply brake!" */
    C_MGGEA = 6, /** "C", message "Transmission, request gear again!" */
    C_MGZSN = 7, /** "C", message "Gear, insert N to start!" */
    A_MGFB_WT = 10, /** "A", message "Activate gear, parking brake!" with warning tone */
    A_MGSNN = 11, /** "A", message "Shift gear, shift lever to N!" */
    A_MGBB = 12, /** "A", message "gear, apply brake!" */
    A_MGGEA = 14, /** "A", message "Request transmission, gear again!" */
    A_MGZSN = 15, /** "A", message "Gear, insert N to start!" */
    S_MGFB_WT = 18, /** "S", message "Activate gear, parking brake!" with warning tone */
    S_MGSNN = 19, /** "S", message "Shift gear, shift lever to N!" */
    S_MGBB = 20, /** "S", message "gear, apply brake!" */
    S_MGGEA = 22, /** "S", message "Request gear, gear again!" */
    S_MGZSN = 23, /** "S", message "Gear, insert N to start!" */
    UP = 24, /** shift recommendation "upshift" */
    DOWN = 25, /** Shift recommendation "Downshift" */
    BLANK = 32, /** "" (blank) */
    BLANK_MGN = 64, /** "" (blank), message "Gear, insert N!" */
    A = 65, /** "A" */
    C = 67, /** "C" */
    F = 70, /** "F" */
    M = 77, /** "M" */
    S = 83, /** "S" */
    W = 87, /** "W" */
    U = 95, /** "_" (Underscore) */
    BLANK_MGW = 96, /** "" (blank), message "Gearbox, visit workshop!" */
    A_MGN = 97, /** "A", message "Gear, insert N!" */
    C_MGN = 99, /** "C", message "Gear, insert N!" */
    M_MGN = 109, /** "M", message "Gear, insert N!" */
    S_MGN = 115, /** "S", message "Gear, insert N!" */
    W_MGN = 119, /** "W", message "Gear, insert N!" */
    U_MGN = 127, /** "_" (Underscore), message "Gear, insert N!" */
    A_MGW = 129, /** "A", message "Gearbox, visit workshop!" */
    C_MGW = 131, /** "C", message "Gearbox, visit workshop!" */
    F_MGW = 134, /** Error marking "F", message "Gearbox, visit workshop!" */
    M_MGW = 141, /** "M", message "Gearbox, visit workshop!" */
    S_MGW = 147, /** "S", message "Gearbox, visit workshop!" */
    W_MGW = 151, /** "W", message "Gearbox, visit workshop!" */
    U_MGW = 159, /** "_" (Underscore), message "Gearbox, go to the workshop!" */
    SNV = 255, /** Passive value */
};

enum class GS_418H_MECH {
    LARGE = 0, /** NAG, Large Gear */
    SMALL = 1, /** NAG, Small Gear */
    GROSS2 = 2, /** NAG2, Large Gear */
    KLEIN2 = 3, /** NAG2, Small Gear */
};

enum class GS_418H_GIC {
    N = 0, /** actual gear "N" */
    D1 = 1, /** actual gear "1" */
    D2 = 2, /** actual gear "2" */
    D3 = 3, /** actual gear "3" */
    D4 = 4, /** actual gear "4" */
    D5 = 5, /** actual gear "5" */
    D6 = 6, /** actual gear "6" */
    D7 = 7, /** actual gear "7" */
    D_CVT = 8, /** actual gear "continuously forward */
    R_CVT = 9, /** actual gear "continuously backwards" */
    R3 = 10, /** actual gear "R3" */
    R = 11, /** Actual gear "R" */
    R2 = 12, /** actual gear "R2" */
    P = 13, /** actual gear "P" */
    No_Force = 14, /** No Force */
    SNV = 15, /** signal not available */
};

enum class GS_418H_GZC {
    N = 0, /** target gear "N" */
    D1 = 1, /** target gear "1" */
    D2 = 2, /** target gear "2" */
    D3 = 3, /** target gear "3" */
    D4 = 4, /** target gear "4" */
    D5 = 5, /** target gear "5" */
    D6 = 6, /** target gear "6" */
    D7 = 7, /** target gear "7" */
    D_CVT = 8, /** target gear "stepless forward */
    R_CVT = 9, /** target gear "continuously backwards" */
    R3 = 10, /** target gear "R3" */
    R = 11, /** Target gear "R" */
    R2 = 12, /** target gear "R2" */
    P = 13, /** Target gear "P" */
    CANCEL = 14, /** circuit termination */
    SNV = 15, /** signal not available */
};

enum class GS_418H_WHST {
    P = 0, /** Gear selector lever in position "P" */
    R = 1, /** Gear selector lever in position "R" */
    N = 2, /** Gear selector lever in position "N" */
    D = 4, /** Gear selector lever in position "D" */
    SNV = 7, /** signal not available */
};




typedef union {
    uint8_t bytes[8];
    uint64_t raw;

    // Sets speed step
    void set_GS_418H_FSC(uint8_t value){ raw = (raw & 0x00ffffffffffffff) | ((uint64_t)value & 0xff) << 56; }
    // Gets speed step
    GS_418H_FSC get_FSC() { return (GS_418H_FSC)(raw >> 56 & 0xff); }

    // Sets driving program
    void set_GS_418H_FPC(uint8_t value){ raw = (raw & 0xff00ffffffffffff) | ((uint64_t)value & 0xff) << 48; }
    // Gets driving program
    GS_418H_FPC get_FPC() { return (GS_418H_FPC)(raw >> 48 & 0xff); }

    // Sets transmission oil temperature
    void set_T_GET(uint8_t value){ raw = (raw & 0xffff00ffffffffff) | ((uint64_t)value & 0xff) << 40; }
    // Gets transmission oil temperature
    uint8_t get_T_GET() { return raw >> 40 & 0xff; }

    // Sets Kickdown
    void set_KD(bool value){ raw = (raw & 0xfffffffeffffffff) | ((uint64_t)value & 0x1) << 32; }
    // Gets Kickdown
    bool get_KD() { return raw >> 32 & 0x1; }

    // Sets apply brake when switching on
    void set_ESV_BRE(bool value){ raw = (raw & 0xfffffffdffffffff) | ((uint64_t)value & 0x1) << 33; }
    // Gets apply brake when switching on
    bool get_ESV_BRE() { return raw >> 33 & 0x1; }

    // Sets gear mechanism variant
    void set_GS_418H_MECH(uint8_t value){ raw = (raw & 0xfffffff3ffffffff) | ((uint64_t)value & 0x3) << 34; }
    // Gets gear mechanism variant
    GS_418H_MECH get_MECH() { return (GS_418H_MECH)(raw >> 34 & 0x3); }

    // Sets continuously variable transmission [1], multi-step transmission [0]
    void set_CVT(bool value){ raw = (raw & 0xffffffefffffffff) | ((uint64_t)value & 0x1) << 36; }
    // Gets continuously variable transmission [1], multi-step transmission [0]
    bool get_CVT() { return raw >> 36 & 0x1; }

    // Sets switching
    void set_SWITCH(bool value){ raw = (raw & 0xffffffdfffffffff) | ((uint64_t)value & 0x1) << 37; }
    // Gets switching
    bool get_SWITCH() { return raw >> 37 & 0x1; }

    // Sets front-wheel drive [1], rear-wheel drive [0]
    void set_FRONT(bool value){ raw = (raw & 0xffffffbfffffffff) | ((uint64_t)value & 0x1) << 38; }
    // Gets front-wheel drive [1], rear-wheel drive [0]
    bool get_FRONT() { return raw >> 38 & 0x1; }

    // Sets all-wheel drive
    void set_ALL_WHEEL(bool value){ raw = (raw & 0xffffff7fffffffff) | ((uint64_t)value & 0x1) << 39; }
    // Gets all-wheel drive
    bool get_ALL_WHEEL() { return raw >> 39 & 0x1; }

    // Sets actual gear
    void set_GS_418H_GIC(uint8_t value){ raw = (raw & 0xfffffffff0ffffff) | ((uint64_t)value & 0xf) << 24; }
    // Gets actual gear
    GS_418H_GIC get_GIC() { return (GS_418H_GIC)(raw >> 24 & 0xf); }

    // Sets target gear
    void set_GS_418H_GZC(uint8_t value){ raw = (raw & 0xffffffff0fffffff) | ((uint64_t)value & 0xf) << 28; }
    // Gets target gear
    GS_418H_GZC get_GZC() { return (GS_418H_GZC)(raw >> 28 & 0xf); }

    // Sets torque loss (FFh at KSG)
    void set_M_VERL(uint8_t value){ raw = (raw & 0xffffffffff00ffff) | ((uint64_t)value & 0xff) << 16; }
    // Gets torque loss (FFh at KSG)
    uint8_t get_M_VERL() { return raw >> 16 & 0xff; }

    // Sets Gear selector lever position (NAG, KSG, CVT)
    void set_GS_418H_WHST(uint8_t value){ raw = (raw & 0xffffffffffffc7ff) | ((uint64_t)value & 0x7) << 11; }
    // Gets Gear selector lever position (NAG, KSG, CVT)
    GS_418H_WHST get_WHST() { return (GS_418H_WHST)(raw >> 11 & 0x7); }

    // Sets Factor wheel torque toggle 40ms + -10
    void set_FMRADTGL(bool value){ raw = (raw & 0xffffffffffffbfff) | ((uint64_t)value & 0x1) << 14; }
    // Gets Factor wheel torque toggle 40ms + -10
    bool get_FMRADTGL() { return raw >> 14 & 0x1; }

    // Sets Wheel torque parity factor (even parity)
    void set_FMRADPAR(bool value){ raw = (raw & 0xffffffffffff7fff) | ((uint64_t)value & 0x1) << 15; }
    // Gets Wheel torque parity factor (even parity)
    bool get_FMRADPAR() { return raw >> 15 & 0x1; }

    // Sets wheel torque factor (7FFh at KSG)
    void set_FMRAD(short value){ raw = (raw & 0xfffffffffffff800) | ((uint64_t)value & 0x7ff) << 0; }
    // Gets wheel torque factor (7FFh at KSG)
    short get_FMRAD() { return raw >> 0 & 0x7ff; }

    /** Imports the frame data from a source */
    void import_frame(uint32_t cid, uint8_t* data, uint8_t len) {
        if (cid == GS_418_ID) {
            for (int i = 0; i < len; i++) {
                bytes[7-i] = data[i];
            }
        }
    }

    /** Exports the frame data to a destination */
    void export_frame(uint32_t* cid, uint8_t* data, uint8_t* len) {
        *cid = GS_418_ID;
        *len = 8;
        for (int i = 0; i < *len; i++) {
            data[i] = bytes[7-i];
        }
    }
} GS_418;

#endif
