#ifndef ZGW_248H_H_
#define ZGW_248H_H_

/**
 * AUTOGENERATED BY gen_unions.py
*/
#include <stdint.h>

#define ZGW_248_ID 0x0248



enum class ZGW_248H_ANH_ERK2 {
    NONE = 0, /** Trailer not recognized */
    OK = 1, /** trailer recognized */
    NOT_DEFINED = 2, /** not defined */
    SNV = 3, /** signal not available */
};




typedef union {
    uint8_t bytes[8];
    uint64_t raw;

    // Sets switch on low beam
    void set_ABL_EIN(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }
    // Gets switch on low beam
    bool get_ABL_EIN() { return raw >> 60 & 0x1; }

    // Sets Start Xenon4 diagnostic procedure on the driver's side
    void set_DIAG_X4_F(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }
    // Gets Start Xenon4 diagnostic procedure on the driver's side
    bool get_DIAG_X4_F() { return raw >> 62 & 0x1; }

    // Sets Start Xenon4 diagnostic procedure on the passenger side
    void set_DIAG_X4_B(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }
    // Gets Start Xenon4 diagnostic procedure on the passenger side
    bool get_DIAG_X4_B() { return raw >> 63 & 0x1; }

    // Sets Trailer operation detected
    void set_ZGW_248H_ANH_ERK2(uint8_t value){ raw = (raw & 0xfffcffffffffffff) | ((uint64_t)value & 0x3) << 48; }
    // Gets Trailer operation detected
    ZGW_248H_ANH_ERK2 get_ANH_ERK2() { return (ZGW_248H_ANH_ERK2)(raw >> 48 & 0x3); }

    // Sets Auxiliary water pump is running
    void set_ZWP_LFT(bool value){ raw = (raw & 0xfffbffffffffffff) | ((uint64_t)value & 0x1) << 50; }
    // Gets Auxiliary water pump is running
    bool get_ZWP_LFT() { return raw >> 50 & 0x1; }

    // Sets AFL request: switch on low beam
    void set_AFL_ABL_EIN(bool value){ raw = (raw & 0xfff7ffffffffffff) | ((uint64_t)value & 0x1) << 51; }
    // Gets AFL request: switch on low beam
    bool get_AFL_ABL_EIN() { return raw >> 51 & 0x1; }

    /** Imports the frame data from a source */
    void import_frame(uint32_t cid, uint8_t* data, uint8_t len) {
        if (cid == ZGW_248_ID) {
            for (int i = 0; i < len; i++) {
                bytes[7-i] = data[i];
            }
        }
    }

    /** Exports the frame data to a destination */
    void export_frame(uint32_t* cid, uint8_t* data, uint8_t* len) {
        *cid = ZGW_248_ID;
        *len = 8;
        for (int i = 0; i < *len; i++) {
            data[i] = bytes[7-i];
        }
    }
} ZGW_248;

#endif
