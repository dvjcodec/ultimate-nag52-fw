#ifndef KOMBI_412H_H_
#define KOMBI_412H_H_

/**
 * AUTOGENERATED BY gen_unions.py
*/
#include <stdint.h>

#define KOMBI_412_ID 0x0412



enum class KOMBI_412H_IST_ABST {
    VERY_SMALL = 0, /** Very Small */
    SMALL = 1, /** Small */
    MEDIUM = 2, /** Medium */
    LARGE = 3, /** Large */
    VERY_LARGE = 4, /** Very Large */
    NOT_DEFINED1 = 5, /** not defined */
    NOT_DEFINED2 = 6, /** not defined */
    NOT_DEFINED3 = 7, /** not defined */
};

enum class KOMBI_412H_DRTGANZ {
    PASSIVE = 0, /** No direction of rotation detection */
    FORWARD = 1, /** direction of rotation forward */
    REVERSE = 2, /** direction of rotation backwards */
    SNV = 3, /** signal not available */
};

enum class KOMBI_412H_PRW_ANF {
    IDLE = 0, /** No change */
    OFF = 1, /** switch PRW off */
    ON = 2, /** Activate PRW again */
    SNV = 3, /** signal not available */
};




typedef union {
    uint8_t bytes[8];
    uint64_t raw;

    // Sets Status ECO warning
    void set_ECO_WARN_ST(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }
    // Gets Status ECO warning
    bool get_ECO_WARN_ST() { return raw >> 59 & 0x1; }

    // Sets Optical warning off
    void set_OPT_WARN_AUS(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }
    // Gets Optical warning off
    bool get_OPT_WARN_AUS() { return raw >> 62 & 0x1; }

    // Sets Acoustic warning off
    void set_AKU_WARN_AUS(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }
    // Gets Acoustic warning off
    bool get_AKU_WARN_AUS() { return raw >> 63 & 0x1; }

    // Sets Set distance
    void set_KOMBI_412H_IST_ABST(uint8_t value){ raw = (raw & 0xff8fffffffffffff) | ((uint64_t)value & 0x7) << 52; }
    // Gets Set distance
    KOMBI_412H_IST_ABST get_IST_ABST() { return (KOMBI_412H_IST_ABST)(raw >> 52 & 0x7); }

    // Sets distance unit
    void set_ABST_S(bool value){ raw = (raw & 0xff7fffffffffffff) | ((uint64_t)value & 0x1) << 55; }
    // Gets distance unit
    bool get_ABST_S() { return raw >> 55 & 0x1; }

    // Sets Displayed speed
    void set_V_ANZ(short value){ raw = (raw & 0xfff000ffffffffff) | ((uint64_t)value & 0xfff) << 40; }
    // Gets Displayed speed
    short get_V_ANZ() { return raw >> 40 & 0xfff; }

    // Sets direction of wheel rotation to V_ANZ
    void set_KOMBI_412H_DRTGANZ(uint8_t value){ raw = (raw & 0xffffff3fffffffff) | ((uint64_t)value & 0x3) << 38; }
    // Gets direction of wheel rotation to V_ANZ
    KOMBI_412H_DRTGANZ get_DRTGANZ() { return (KOMBI_412H_DRTGANZ)(raw >> 38 & 0x3); }

    // Sets wheel speed calculated from V_ANZ
    void set_DANZ(short value){ raw = (raw & 0xffffffc000ffffff) | ((uint64_t)value & 0x3fff) << 24; }
    // Gets wheel speed calculated from V_ANZ
    short get_DANZ() { return raw >> 24 & 0x3fff; }

    // Sets Flat roll warning request
    void set_KOMBI_412H_PRW_ANF(uint8_t value){ raw = (raw & 0xfffffffffffcffff) | ((uint64_t)value & 0x3) << 16; }
    // Gets Flat roll warning request
    KOMBI_412H_PRW_ANF get_PRW_ANF() { return (KOMBI_412H_PRW_ANF)(raw >> 16 & 0x3); }

    // Sets Activate ECO in the combination menu
    void set_ECO_AKT(bool value){ raw = (raw & 0xfffffffffff7ffff) | ((uint64_t)value & 0x1) << 19; }
    // Gets Activate ECO in the combination menu
    bool get_ECO_AKT() { return raw >> 19 & 0x1; }

    // Sets engine shutdown time
    void set_MAZ_NEU(short value){ raw = (raw & 0xfffffffffffff000) | ((uint64_t)value & 0xfff) << 0; }
    // Gets engine shutdown time
    short get_MAZ_NEU() { return raw >> 0 & 0xfff; }

    /** Imports the frame data from a source */
    void import_frame(uint32_t cid, uint8_t* data, uint8_t len) {
        if (cid == KOMBI_412_ID) {
            for (int i = 0; i < len; i++) {
                bytes[7-i] = data[i];
            }
        }
    }

    /** Exports the frame data to a destination */
    void export_frame(uint32_t* cid, uint8_t* data, uint8_t* len) {
        *cid = KOMBI_412_ID;
        *len = 8;
        for (int i = 0; i < *len; i++) {
            data[i] = bytes[7-i];
        }
    }
} KOMBI_412;

#endif
