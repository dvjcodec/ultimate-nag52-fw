#ifndef KOMBI_408_H_
#define KOMBI_408_H_

/**
 * AUTOGENERATED BY gen_unions.py
*/
#include <stdint.h>

#define KOMBI_408_ID 0x0408



enum class KOMBI_408_WRC {
    UBG = 0, /** unlimited */
    BG210 = 1, /** 210 km */
    BG190 = 2, /** 190 km */
    BG160 = 3, /** 160 km */
    BG240 = 4, /** 240 km */
    BG230 = 5, /** 230 km */
    BG220 = 6, /** 220 km */
    BG200 = 7, /** 200 km */
    BG180 = 128, /** 180 km */
    BG170 = 129, /** 170 km */
    BG150 = 130, /** 150 km */
    BG140 = 131, /** 140 km */
    BG130 = 132, /** 130 km */
    BG120 = 133, /** 120 km */
    BG110 = 134, /** 110 km */
    BG100 = 135, /** 100 km */
};




typedef union {
    uint8_t bytes[8];
    uint64_t raw;

    // Sets tank level
    void set_TANK_FS(uint8_t value){ raw = (raw & 0x00ffffffffffffff) | ((uint64_t)value & 0xff) << 56; }
    // Gets tank level
    uint8_t get_TANK_FS() { return raw >> 56 & 0xff; }

    // Sets Terminal 61 decoupled
    void set_KL_61E(bool value){ raw = (raw & 0xfffeffffffffffff) | ((uint64_t)value & 0x1) << 48; }
    // Gets Terminal 61 decoupled
    bool get_KL_61E() { return raw >> 48 & 0x1; }

    // Sets minimum tank level
    void set_TFSM(bool value){ raw = (raw & 0xfffdffffffffffff) | ((uint64_t)value & 0x1) << 49; }
    // Gets minimum tank level
    bool get_TFSM() { return raw >> 49 & 0x1; }

    // Sets Pre-glow control lamp defective
    void set_VGL_KL_DEF(bool value){ raw = (raw & 0xfffbffffffffffff) | ((uint64_t)value & 0x1) << 50; }
    // Gets Pre-glow control lamp defective
    bool get_VGL_KL_DEF() { return raw >> 50 & 0x1; }

    // Sets air conditioning available
    void set_KLA_VH(bool value){ raw = (raw & 0xfff7ffffffffffff) | ((uint64_t)value & 0x1) << 51; }
    // Gets air conditioning available
    bool get_KLA_VH() { return raw >> 51 & 0x1; }

    // Sets mph instead of km / h (variable speed limit)
    void set_V_MPH(bool value){ raw = (raw & 0xffefffffffffffff) | ((uint64_t)value & 0x1) << 52; }
    // Gets mph instead of km / h (variable speed limit)
    bool get_V_MPH() { return raw >> 52 & 0x1; }

    // Sets Tacho calibration
    void set_TACHO_SYM(bool value){ raw = (raw & 0xffdfffffffffffff) | ((uint64_t)value & 0x1) << 53; }
    // Gets Tacho calibration
    bool get_TACHO_SYM() { return raw >> 53 & 0x1; }

    // Sets Speed ​​limiter / tempomat display not possible
    void set_V_DSPL_AUS(bool value){ raw = (raw & 0xffbfffffffffffff) | ((uint64_t)value & 0x1) << 54; }
    // Gets Speed ​​limiter / tempomat display not possible
    bool get_V_DSPL_AUS() { return raw >> 54 & 0x1; }

    // Sets driver's door open
    void set_TF_AUF(bool value){ raw = (raw & 0xff7fffffffffffff) | ((uint64_t)value & 0x1) << 55; }
    // Gets driver's door open
    bool get_TF_AUF() { return raw >> 55 & 0x1; }

    // Sets Raw outside air temperature
    void set_T_AUSSEN(uint8_t value){ raw = (raw & 0xffff00ffffffffff) | ((uint64_t)value & 0xff) << 40; }
    // Gets Raw outside air temperature
    uint8_t get_T_AUSSEN() { return raw >> 40 & 0xff; }

    // Sets Terminal 58 dimmed
    void set_KL_58D(uint8_t value){ raw = (raw & 0xffffff00ffffffff) | ((uint64_t)value & 0xff) << 32; }
    // Gets Terminal 58 dimmed
    uint8_t get_KL_58D() { return raw >> 32 & 0xff; }

    // Sets engine shutdown time (is sent from terminal 15)
    void set_MAZ(uint8_t value){ raw = (raw & 0xffffffff00ffffff) | ((uint64_t)value & 0xff) << 24; }
    // Gets engine shutdown time (is sent from terminal 15)
    uint8_t get_MAZ() { return raw >> 24 & 0xff; }

    // Sets mileage
    void set_KM16(short value){ raw = (raw & 0xffffffffff0000ff) | ((uint64_t)value & 0xffff) << 8; }
    // Gets mileage
    short get_KM16() { return raw >> 8 & 0xffff; }

    // Sets maximum winter tire speed with 4 bits
    void set_KOMBI_408_WRC(uint8_t value){ raw = (raw & 0xfffffffffffffff8) | ((uint64_t)value & 0x7) << 0; }
    // Gets maximum winter tire speed with 4 bits
    KOMBI_408_WRC get_WRC() { return (KOMBI_408_WRC)(raw >> 0 & 0x7); }

    // Sets Activate roller test mode ESP
    void set_RT_EIN(bool value){ raw = (raw & 0xfffffffffffffff7) | ((uint64_t)value & 0x1) << 3; }
    // Gets Activate roller test mode ESP
    bool get_RT_EIN() { return raw >> 3 & 0x1; }

    // Sets Enable auxiliary heater
    void set_ZH_FREIG(bool value){ raw = (raw & 0xffffffffffffffef) | ((uint64_t)value & 0x1) << 4; }
    // Gets Enable auxiliary heater
    bool get_ZH_FREIG() { return raw >> 4 & 0x1; }

    // Sets segment tachometer available
    void set_SGT_VH(bool value){ raw = (raw & 0xffffffffffffffdf) | ((uint64_t)value & 0x1) << 5; }
    // Gets segment tachometer available
    bool get_SGT_VH() { return raw >> 5 & 0x1; }

    // Sets Speed ​​limiter / cruise control display active
    void set_V_DSPL_AKT(bool value){ raw = (raw & 0xffffffffffffffbf) | ((uint64_t)value & 0x1) << 6; }
    // Gets Speed ​​limiter / cruise control display active
    bool get_V_DSPL_AKT() { return raw >> 6 & 0x1; }

    // Sets Winter tire maximum speed bit 3
    void set_WRC3(bool value){ raw = (raw & 0xffffffffffffff7f) | ((uint64_t)value & 0x1) << 7; }
    // Gets Winter tire maximum speed bit 3
    bool get_WRC3() { return raw >> 7 & 0x1; }

    /** Imports the frame data from a source */
    void import_frame(uint32_t cid, uint8_t* data, uint8_t len) {
        if (cid == KOMBI_408_ID) {
            for (int i = 0; i < len; i++) {
                bytes[7-i] = data[i];
            }
        }
    }

    /** Exports the frame data to a destination */
    void export_frame(uint32_t* cid, uint8_t* data, uint8_t* len) {
        *cid = KOMBI_408_ID;
        *len = 8;
        for (int i = 0; i < *len; i++) {
            data[i] = bytes[7-i];
        }
    }
} KOMBI_408;

#endif
