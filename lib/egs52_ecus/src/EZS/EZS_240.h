#ifndef EZS_240_H_
#define EZS_240_H_

/**
 * AUTOGENERATED BY gen_unions.py
*/
#include <stdint.h>

#define EZS_240_ID 0x0240



enum class EZS_240_LL_RLC {
    NOT_DEFINED = 0, /** not defined */
    LL = 1, /** left hand drive */
    RL = 2, /** right hand drive */
    SNV = 3, /** code does not exist */
};

enum class EZS_240_ESP_BET {
    NBET = 0, /** Not pressed (rocker and push push) */
    AUS_BET = 1, /** ESP off actuated (rocker), actuated (Push Push) */
    EIN_NDEF = 2, /** ESP on actuated (rocker), not defined (push push) */
    SNV = 3, /** signal not available (rocker and push push) */
};

enum class EZS_240_ART_ABW_BET {
    NDEF_NBET = 0, /** not defined (rocker), not actuated (push push) */
    AUS_NDEF = 1, /** Distance warning off (rocker), not defined (Push Push) */
    ON_BET = 2, /** Distance warning on (rocker), activated (Push Push) */
    SNV = 3, /** signal not available (rocker and push push) */
};

enum class EZS_240_ST3_BET {
    NBET = 0, /** Not pressed (rocker and push push) */
    UNBET_NDEF = 1, /** Pressed down (rocker), not defined (Push Push) */
    OBBET_BET = 2, /** Pressed at the top (rocker), pressed (Push Push) */
    NOT_DEFINED = 3, /** Not defined (rocker and push push) */
};

enum class EZS_240_ST2_BET {
    NBET = 0, /** Not pressed (rocker and push push) */
    UNBET_NDEF = 1, /** Pressed down (rocker), not defined (Push Push) */
    OBBET_BET = 2, /** Pressed at the top (rocker), pressed (Push Push) */
    NOT_DEFINED = 3, /** Not defined (rocker and push push) */
};

enum class EZS_240_LDC {
    RDW = 0, /** rest of the world */
    USA_CAN = 1, /** USA */
    NOT_DEFINED = 2, /** not defined */
    SNV = 3, /** code does not exist */
};

enum class EZS_240_FZGVERSN {
    START_LAUNCHED = 0, /** Status when the respective series */
    V1 = 1, /** BR 220: AJ 99 */
    V2 = 2, /** BR 220: AJ 01/1, C215: AJ 02 */
    V3 = 3, /** BR 220: ÄJ 02 */
    V4 = 4, /** BR 220: prohibited, C215 */
    V5 = 5, /** BR 220: prohibited, C215 */
    V6 = 6, /** BR 220: ÄJ 03 */
    V7 = 7, /** BR 220 */
};




typedef union {
    uint8_t bytes[8];
    uint64_t raw;

    // Sets Cruise control lever: "Switch off"
    void set_OFF(bool value){ raw = (raw & 0xfeffffffffffffff) | ((uint64_t)value & 0x1) << 56; }
    // Gets Cruise control lever: "Switch off"
    bool get_OFF() { return raw >> 56 & 0x1; }

    // Sets Cruise control lever: "Resume"
    void set_WA(bool value){ raw = (raw & 0xfdffffffffffffff) | ((uint64_t)value & 0x1) << 57; }
    // Gets Cruise control lever: "Resume"
    bool get_WA() { return raw >> 57 & 0x1; }

    // Sets Cruise control lever: "Set and accelerate level0"
    void set_S_PLUS_B(bool value){ raw = (raw & 0xfbffffffffffffff) | ((uint64_t)value & 0x1) << 58; }
    // Gets Cruise control lever: "Set and accelerate level0"
    bool get_S_PLUS_B() { return raw >> 58 & 0x1; }

    // Sets Cruise control lever: "Set and decelerate level0"
    void set_S_MINUS_B(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }
    // Gets Cruise control lever: "Set and decelerate level0"
    bool get_S_MINUS_B() { return raw >> 59 & 0x1; }

    // Sets Operation variable speed limit
    void set_VMAX_AKT(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }
    // Gets Operation variable speed limit
    bool get_VMAX_AKT() { return raw >> 60 & 0x1; }

    // Sets Cruise control lever implausible
    void set_WH_UP(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }
    // Gets Cruise control lever implausible
    bool get_WH_UP() { return raw >> 61 & 0x1; }

    // Sets Terminal 50
    void set_KL_50(bool value){ raw = (raw & 0xfffeffffffffffff) | ((uint64_t)value & 0x1) << 48; }
    // Gets Terminal 50
    bool get_KL_50() { return raw >> 48 & 0x1; }

    // Sets Terminal 15
    void set_KL_15(bool value){ raw = (raw & 0xfffdffffffffffff) | ((uint64_t)value & 0x1) << 49; }
    // Gets Terminal 15
    bool get_KL_15() { return raw >> 49 & 0x1; }

    // Sets brake switch for shift lock
    void set_BS_SL(bool value){ raw = (raw & 0xfffbffffffffffff) | ((uint64_t)value & 0x1) << 50; }
    // Gets brake switch for shift lock
    bool get_BS_SL() { return raw >> 50 & 0x1; }

    // Sets reverse gear engaged (only manual transmission)
    void set_RG_SCHALT(bool value){ raw = (raw & 0xfff7ffffffffffff) | ((uint64_t)value & 0x1) << 51; }
    // Gets reverse gear engaged (only manual transmission)
    bool get_RG_SCHALT() { return raw >> 51 & 0x1; }

    // Sets left-hand drive / right-hand drive
    void set_EZS_240_LL_RLC(EZS_240_LL_RLC value){ raw = (raw & 0xffcfffffffffffff) | ((uint64_t)value & 0x3) << 52; }
    // Gets left-hand drive / right-hand drive
    EZS_240_LL_RLC get_LL_RLC() { return (EZS_240_LL_RLC)(raw >> 52 & 0x3); }

    // Sets Keyles Go event conditions met
    void set_KG_ALB_OK(bool value){ raw = (raw & 0xffbfffffffffffff) | ((uint64_t)value & 0x1) << 54; }
    // Gets Keyles Go event conditions met
    bool get_KG_ALB_OK() { return raw >> 54 & 0x1; }

    // Sets Keyless Go terminal control active
    void set_KG_KL_AKT(bool value){ raw = (raw & 0xff7fffffffffffff) | ((uint64_t)value & 0x1) << 55; }
    // Gets Keyless Go terminal control active
    bool get_KG_KL_AKT() { return raw >> 55 & 0x1; }

    // Sets message counter
    void set_BZ240h(uint8_t value){ raw = (raw & 0xfffff0ffffffffff) | ((uint64_t)value & 0xf) << 40; }
    // Gets message counter
    uint8_t get_BZ240h() { return raw >> 40 & 0xf; }

    // Sets Cruise control lever parity (even parity)
    void set_WH_PA(bool value){ raw = (raw & 0xffffefffffffffff) | ((uint64_t)value & 0x1) << 44; }
    // Gets Cruise control lever parity (even parity)
    bool get_WH_PA() { return raw >> 44 & 0x1; }

    // Sets crash signal from Airbag-SG
    void set_CRASH(bool value){ raw = (raw & 0xfffffffeffffffff) | ((uint64_t)value & 0x1) << 32; }
    // Gets crash signal from Airbag-SG
    bool get_CRASH() { return raw >> 32 & 0x1; }

    // Sets CRASH confirmbit
    void set_CRASH_CNF(bool value){ raw = (raw & 0xfffffffdffffffff) | ((uint64_t)value & 0x1) << 33; }
    // Gets CRASH confirmbit
    bool get_CRASH_CNF() { return raw >> 33 & 0x1; }

    // Sets ASG sport mode on / off activated (ST2_LED_DL if ABC is available)
    void set_ASG_SPORT_BET(bool value){ raw = (raw & 0xffffffefffffffff) | ((uint64_t)value & 0x1) << 36; }
    // Gets ASG sport mode on / off activated (ST2_LED_DL if ABC is available)
    bool get_ASG_SPORT_BET() { return raw >> 36 & 0x1; }

    // Sets direction flashing left
    void set_BLI_LI(bool value){ raw = (raw & 0xfffffffffeffffff) | ((uint64_t)value & 0x1) << 24; }
    // Gets direction flashing left
    bool get_BLI_LI() { return raw >> 24 & 0x1; }

    // Sets direction flashing right
    void set_BLI_RE(bool value){ raw = (raw & 0xfffffffffdffffff) | ((uint64_t)value & 0x1) << 25; }
    // Gets direction flashing right
    bool get_BLI_RE() { return raw >> 25 & 0x1; }

    // Sets wiper outside of parking position
    void set_KL_31B(bool value){ raw = (raw & 0xfffffffff7ffffff) | ((uint64_t)value & 0x1) << 27; }
    // Gets wiper outside of parking position
    bool get_KL_31B() { return raw >> 27 & 0x1; }

    // Sets handbrake applied (control lamp)
    void set_HAS_KL(bool value){ raw = (raw & 0xffffffffefffffff) | ((uint64_t)value & 0x1) << 28; }
    // Gets handbrake applied (control lamp)
    bool get_HAS_KL() { return raw >> 28 & 0x1; }

    // Sets ESP on / off actuated
    void set_EZS_240_ESP_BET(EZS_240_ESP_BET value){ raw = (raw & 0xffffffff9fffffff) | ((uint64_t)value & 0x3) << 29; }
    // Gets ESP on / off actuated
    EZS_240_ESP_BET get_ESP_BET() { return (EZS_240_ESP_BET)(raw >> 29 & 0x3); }

    // Sets On-board network emergency operation: Prio1 and Prio2 consumers off, second battery supports
    void set_BN_NTLF(bool value){ raw = (raw & 0xffffffff7fffffff) | ((uint64_t)value & 0x1) << 31; }
    // Gets On-board network emergency operation: Prio1 and Prio2 consumers off, second battery supports
    bool get_BN_NTLF() { return raw >> 31 & 0x1; }

    // Sets Terminal 54 hardware active
    void set_KL54_RM(bool value){ raw = (raw & 0xfffffffffffeffff) | ((uint64_t)value & 0x1) << 16; }
    // Gets Terminal 54 hardware active
    bool get_KL54_RM() { return raw >> 16 & 0x1; }

    // Sets Switch on low beam
    void set_ABL_EIN(bool value){ raw = (raw & 0xfffffffffffdffff) | ((uint64_t)value & 0x1) << 17; }
    // Gets Switch on low beam
    bool get_ABL_EIN() { return raw >> 17 & 0x1; }

    // Sets ART distance warning on / off activated
    void set_EZS_240_ART_ABW_BET(EZS_240_ART_ABW_BET value){ raw = (raw & 0xfffffffffff3ffff) | ((uint64_t)value & 0x3) << 18; }
    // Gets ART distance warning on / off activated
    EZS_240_ART_ABW_BET get_ART_ABW_BET() { return (EZS_240_ART_ABW_BET)(raw >> 18 & 0x3); }

    // Sets LF / ABC 3-stage switch actuated
    void set_EZS_240_ST3_BET(EZS_240_ST3_BET value){ raw = (raw & 0xffffffffffcfffff) | ((uint64_t)value & 0x3) << 20; }
    // Gets LF / ABC 3-stage switch actuated
    EZS_240_ST3_BET get_ST3_BET() { return (EZS_240_ST3_BET)(raw >> 20 & 0x3); }

    // Sets LF / ABC 2-stage switch actuated
    void set_EZS_240_ST2_BET(EZS_240_ST2_BET value){ raw = (raw & 0xffffffffff3fffff) | ((uint64_t)value & 0x3) << 22; }
    // Gets LF / ABC 2-stage switch actuated
    EZS_240_ST2_BET get_ST2_BET() { return (EZS_240_ST2_BET)(raw >> 22 & 0x3); }

    // Sets distance factor
    void set_ART_ABSTAND(uint8_t value){ raw = (raw & 0xffffffffffff00ff) | ((uint64_t)value & 0xff) << 8; }
    // Gets distance factor
    uint8_t get_ART_ABSTAND() { return raw >> 8 & 0xff; }

    // Sets country code
    void set_EZS_240_LDC(EZS_240_LDC value){ raw = (raw & 0xfffffffffffffffc) | ((uint64_t)value & 0x3) << 0; }
    // Gets country code
    EZS_240_LDC get_LDC() { return (EZS_240_LDC)(raw >> 0 & 0x3); }

    // Sets model-dependent vehicle version (only 220/215/230)
    void set_EZS_240_FZGVERSN(EZS_240_FZGVERSN value){ raw = (raw & 0xffffffffffffffe3) | ((uint64_t)value & 0x7) << 2; }
    // Gets model-dependent vehicle version (only 220/215/230)
    EZS_240_FZGVERSN get_FZGVERSN() { return (EZS_240_FZGVERSN)(raw >> 2 & 0x7); }

    // Sets E-suction fan: basic ventilation off
    void set_GBL_AUS(bool value){ raw = (raw & 0xffffffffffffffbf) | ((uint64_t)value & 0x1) << 6; }
    // Gets E-suction fan: basic ventilation off
    bool get_GBL_AUS() { return raw >> 6 & 0x1; }

    // Sets ART available
    void set_ART_VH(bool value){ raw = (raw & 0xffffffffffffff7f) | ((uint64_t)value & 0x1) << 7; }
    // Gets ART available
    bool get_ART_VH() { return raw >> 7 & 0x1; }

    /** Imports the frame data from a source */
    void import_frame(uint32_t cid, uint8_t* data, uint8_t len) {
        if (cid == EZS_240_ID) {
            for (int i = 0; i < len; i++) {
                bytes[7-i] = data[i];
            }
        }
    }

    /** Exports the frame data to a destination */
    void export_frame(uint32_t* cid, uint8_t* data, uint8_t* len) {
        *cid = EZS_240_ID;
        *len = 8;
        for (int i = 0; i < *len; i++) {
            data[i] = bytes[7-i];
        }
    }
} EZS_240;

#endif
