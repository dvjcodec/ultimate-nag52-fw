#ifndef KLA_410_H_
#define KLA_410_H_

/**
 * AUTOGENERATED BY gen_unions.py
*/
#include <stdint.h>

#define KLA_410_ID 0x0410






typedef union {
    uint8_t bytes[8];
    uint64_t raw;

    // Sets A / C compressor switched on
    void set_KOMP_EIN(bool value){ raw = (raw & 0xfeffffffffffffff) | ((uint64_t)value & 0x1) << 56; }
    // Gets A / C compressor switched on
    bool get_KOMP_EIN() { return raw >> 56 & 0x1; }

    // Sets Idle speed increase to increase the cooling capacity
    void set_LL_DZA(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }
    // Gets Idle speed increase to increase the cooling capacity
    bool get_LL_DZA() { return raw >> 62 & 0x1; }

    // Sets Switching on auxiliary heater allowed
    void set_ZH_EIN_OK(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }
    // Gets Switching on auxiliary heater allowed
    bool get_ZH_EIN_OK() { return raw >> 63 & 0x1; }

    // Sets refrigerant pressure
    void set_P_KAELTE8(uint8_t value){ raw = (raw & 0xff00ffffffffffff) | ((uint64_t)value & 0xff) << 48; }
    // Gets refrigerant pressure
    uint8_t get_P_KAELTE8() { return raw >> 48 & 0xff; }

    // Sets Torque absorption refrigeration compressor
    void set_M_KOMP(uint8_t value){ raw = (raw & 0xffff00ffffffffff) | ((uint64_t)value & 0xff) << 40; }
    // Gets Torque absorption refrigeration compressor
    uint8_t get_M_KOMP() { return raw >> 40 & 0xff; }

    // Sets Motor fan setpoint speed
    void set_NLFTS(uint8_t value){ raw = (raw & 0xffffff00ffffffff) | ((uint64_t)value & 0xff) << 32; }
    // Gets Motor fan setpoint speed
    uint8_t get_NLFTS() { return raw >> 32 & 0xff; }

    // Sets outside air temperature for heat management
    void set_T_AUSSEN_WM(uint8_t value){ raw = (raw & 0xffffffffff00ffff) | ((uint64_t)value & 0xff) << 16; }
    // Gets outside air temperature for heat management
    uint8_t get_T_AUSSEN_WM() { return raw >> 16 & 0xff; }

    /** Imports the frame data from a source */
    void import_frame(uint32_t cid, uint8_t* data, uint8_t len) {
        if (cid == KLA_410_ID) {
            for (int i = 0; i < len; i++) {
                bytes[7-i] = data[i];
            }
        }
    }

    /** Exports the frame data to a destination */
    void export_frame(uint32_t* cid, uint8_t* data, uint8_t* len) {
        *cid = KLA_410_ID;
        *len = 8;
        for (int i = 0; i < *len; i++) {
            data[i] = bytes[7-i];
        }
    }
} KLA_410;

#endif
