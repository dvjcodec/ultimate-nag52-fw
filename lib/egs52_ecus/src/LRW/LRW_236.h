#ifndef LRW_236_H_
#define LRW_236_H_

/**
 * AUTOGENERATED BY gen_unions.py
*/
#include <stdint.h>

#define LRW_236_ID 0x0236



enum class LRW_236_LRWS_ST {
    OK = 0, /** steering wheel angle sensor ok */
    INI = 1, /** Steering wheel angle sensor not initialized */
    ERR = 2, /** steering wheel angle sensor faulty */
    ERR_INI = 3, /** steering wheel angle sensor faulty and not initialized */
};

enum class LRW_236_LRWS_ID {
    INIT_PSBL = 0, /** LRW sensor can be initialized */
    INIT_SELF = 1, /** LRW sensor initializes itself */
    INIT_MUST = 2, /** (LRW sensor must be initialized) */
    SNV = 3, /** signal not available */
};




typedef union {
    uint8_t bytes[8];
    uint64_t raw;

    // Sets steering wheel angle
    void set_LRW(short value){ raw = (raw & 0xc000ffffffffffff) | ((uint64_t)value & 0x3fff) << 48; }
    // Gets steering wheel angle
    short get_LRW() { return raw >> 48 & 0x3fff; }

    // Sets steering wheel angular speed
    void set_VLRW(short value){ raw = (raw & 0xffffc000ffffffff) | ((uint64_t)value & 0x3fff) << 32; }
    // Gets steering wheel angular speed
    short get_VLRW() { return raw >> 32 & 0x3fff; }

    // Sets Steering wheel angle sensor status
    void set_LRW_236_LRWS_ST(LRW_236_LRWS_ST value){ raw = (raw & 0xfffffffffcffffff) | ((uint64_t)value & 0x3) << 24; }
    // Gets Steering wheel angle sensor status
    LRW_236_LRWS_ST get_LRWS_ST() { return (LRW_236_LRWS_ST)(raw >> 24 & 0x3); }

    // Sets Identification of the steering wheel angle sensor
    void set_LRW_236_LRWS_ID(LRW_236_LRWS_ID value){ raw = (raw & 0xfffffffff3ffffff) | ((uint64_t)value & 0x3) << 26; }
    // Gets Identification of the steering wheel angle sensor
    LRW_236_LRWS_ID get_LRWS_ID() { return (LRW_236_LRWS_ID)(raw >> 26 & 0x3); }

    // Sets message counter
    void set_BZ236h(uint8_t value){ raw = (raw & 0xffffffff0fffffff) | ((uint64_t)value & 0xf) << 28; }
    // Gets message counter
    uint8_t get_BZ236h() { return raw >> 28 & 0xf; }

    // Sets CRC checksum byte 1
    void set_CRC236h(uint8_t value){ raw = (raw & 0xffffffffffffff00) | ((uint64_t)value & 0xff) << 0; }
    // Gets CRC checksum byte 1
    uint8_t get_CRC236h() { return raw >> 0 & 0xff; }

    /** Imports the frame data from a source */
    void import_frame(uint32_t cid, uint8_t* data, uint8_t len) {
        if (cid == LRW_236_ID) {
            for (int i = 0; i < len; i++) {
                bytes[7-i] = data[i];
            }
        }
    }

    /** Exports the frame data to a destination */
    void export_frame(uint32_t* cid, uint8_t* data, uint8_t* len) {
        *cid = LRW_236_ID;
        *len = 8;
        for (int i = 0; i < *len; i++) {
            data[i] = bytes[7-i];
        }
    }
} LRW_236;

#endif
