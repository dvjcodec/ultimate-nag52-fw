#ifndef AAD_580H_H_
#define AAD_580H_H_

/**
 * AUTOGENERATED BY gen_unions.py
*/
#include <stdint.h>

#define AAD_580_ID 0x0580






typedef union {
    uint8_t bytes[8];
    uint64_t raw;

    // Sets code number acceleration type (> 100: dynamic)
    void set_FTK_BMI(uint8_t value){ raw = (raw & 0x00ffffffffffffff) | ((uint64_t)value & 0xff) << 56; }
    // Gets code number acceleration type (> 100: dynamic)
    uint8_t get_FTK_BMI() { return raw >> 56 & 0xff; }

    // Sets Code number for lateral acceleration type (> 100: dynamic)
    void set_FTK_LMI(uint8_t value){ raw = (raw & 0xff00ffffffffffff) | ((uint64_t)value & 0xff) << 48; }
    // Gets Code number for lateral acceleration type (> 100: dynamic)
    uint8_t get_FTK_LMI() { return raw >> 48 & 0xff; }

    // Sets code number brake type (> 100: dynamic)
    void set_FTK_VMI(uint8_t value){ raw = (raw & 0xffff00ffffffffff) | ((uint64_t)value & 0xff) << 40; }
    // Gets code number brake type (> 100: dynamic)
    uint8_t get_FTK_VMI() { return raw >> 40 & 0xff; }

    // Sets Max.diff. Pedal angle value per maneuver
    void set_FTK_DPW(uint8_t value){ raw = (raw & 0xffffffff00ffffff) | ((uint64_t)value & 0xff) << 24; }
    // Gets Max.diff. Pedal angle value per maneuver
    uint8_t get_FTK_DPW() { return raw >> 24 & 0xff; }

    // Sets Continuous driver observation
    void set_AADKB(uint8_t value){ raw = (raw & 0xffffffffff00ffff) | ((uint64_t)value & 0xff) << 16; }
    // Gets Continuous driver observation
    uint8_t get_AADKB() { return raw >> 16 & 0xff; }

    // Sets Spontaneous dynamic demand
    void set_AADKBDYN(bool value){ raw = (raw & 0xffffffffffff7fff) | ((uint64_t)value & 0x1) << 15; }
    // Gets Spontaneous dynamic demand
    bool get_AADKBDYN() { return raw >> 15 & 0x1; }

    // Sets Nervousness
    void set_AADNT(uint8_t value){ raw = (raw & 0xffffffffffffff00) | ((uint64_t)value & 0xff) << 0; }
    // Gets Nervousness
    uint8_t get_AADNT() { return raw >> 0 & 0xff; }

    /** Imports the frame data from a source */
    void import_frame(uint32_t cid, uint8_t* data, uint8_t len) {
        if (cid == AAD_580_ID) {
            for (int i = 0; i < len; i++) {
                bytes[7-i] = data[i];
            }
        }
    }

    /** Exports the frame data to a destination */
    void export_frame(uint32_t* cid, uint8_t* data, uint8_t* len) {
        *cid = AAD_580_ID;
        *len = 8;
        for (int i = 0; i < *len; i++) {
            data[i] = bytes[7-i];
        }
    }
} AAD_580;

#endif
