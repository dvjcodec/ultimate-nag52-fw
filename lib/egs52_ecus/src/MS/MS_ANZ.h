#ifndef MS_ANZ_H_
#define MS_ANZ_H_

/**
 * AUTOGENERATED BY gen_unions.py
*/
#include <stdint.h>

#define MS_ANZ_ID 0x033D



enum class MS_ANZ_ASS_DSPL {
    IDLE = 0, /** No status */
    M1 = 1, /** message "ASS not active: motor warm-up" */
    M2 = 2, /** message "ASS active: driving mode" */
    M3 = 3, /** message "ASS active: stop mode" */
    M4 = 4, /** Message "ASS not active: electrical energy demand" */
    M5 = 5, /** Message "ASS not active: air conditioning on" */
    M6 = 6, /** Message "ASS not active: fault" */
    M7 = 7, /** Message "ASS active: electrical energy demand, please start the engine" */
    M8 = 8, /** Message "ASS active: Use the clutch to start" */
    M9 = 9, /** Message "ASS active: Air conditioning? Please start the engine" */
    M10 = 10, /** Message "ASS active: Ignition off when leaving!" */
    M11 = 11, /** message "ASS deactivated" */
    M12 = 12, /** Message "ASS activated" */
    M13 = 13, /** Message "ASS: Display defective" */
    M14 = 14, /** not defined */
    M15 = 15, /** undefined */
};

enum class MS_ANZ_ASS_WARN {
    IDLE = 0, /** No status */
    M1 = 1, /** message "ASS not active: motor warm-up" */
    M2 = 2, /** message "ASS active: driving mode" */
    M3 = 3, /** message "ASS active: stop mode" */
    M4 = 4, /** Message "ASS not active: electrical energy demand" */
    M5 = 5, /** Message "ASS not active: air conditioning on" */
    M6 = 6, /** Message "ASS not active: fault" */
    M7 = 7, /** Message "ASS active: electrical energy demand, please start the engine" */
    M8 = 8, /** Message "ASS active: Use the clutch to start" */
    M9 = 9, /** Message "ASS active: Air conditioning? Please start the engine" */
    M10 = 10, /** Message "ASS active: Ignition off when leaving!" */
    M11 = 11, /** message "ASS deactivated" */
    M12 = 12, /** Message "ASS activated" */
    M13 = 13, /** Message "ASS: Display defective" */
    M14 = 14, /** not defined */
    M15 = 15, /** undefined */
};




typedef union {
    uint8_t bytes[8];
    uint64_t raw;

    // Sets number of the ASS status message
    void set_MS_ANZ_ASS_DSPL(uint8_t value){ raw = (raw & 0xfffff0ffffffffff) | ((uint64_t)value & 0xf) << 40; }
    // Gets number of the ASS status message
    MS_ANZ_ASS_DSPL get_ASS_DSPL() { return (MS_ANZ_ASS_DSPL)(raw >> 40 & 0xf); }

    // Sets number of the ASS warning message
    void set_MS_ANZ_ASS_WARN(uint8_t value){ raw = (raw & 0xffff0fffffffffff) | ((uint64_t)value & 0xf) << 44; }
    // Gets number of the ASS warning message
    MS_ANZ_ASS_WARN get_ASS_WARN() { return (MS_ANZ_ASS_WARN)(raw >> 44 & 0xf); }

    // Sets Suppression of lamp test during the stop phase
    void set_ASS_LTEST_AUS(bool value){ raw = (raw & 0xffffff7fffffffff) | ((uint64_t)value & 0x1) << 39; }
    // Gets Suppression of lamp test during the stop phase
    bool get_ASS_LTEST_AUS() { return raw >> 39 & 0x1; }

    /** Imports the frame data from a source */
    void import_frame(uint32_t cid, uint8_t* data, uint8_t len) {
        if (cid == MS_ANZ_ID) {
            for (int i = 0; i < len; i++) {
                bytes[7-i] = data[i];
            }
        }
    }

    /** Exports the frame data to a destination */
    void export_frame(uint32_t* cid, uint8_t* data, uint8_t* len) {
        *cid = MS_ANZ_ID;
        *len = 8;
        for (int i = 0; i < *len; i++) {
            data[i] = bytes[7-i];
        }
    }
} MS_ANZ;

#endif
