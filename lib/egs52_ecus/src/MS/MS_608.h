#ifndef MS_608H_H_
#define MS_608H_H_

/**
 * AUTOGENERATED BY gen_unions.py
*/
#include <stdint.h>

#define MS_608_ID 0x0608



enum class MS_608H_FCOD_BR {
    BR221 = 0, /** BR 221 or BR 140 */
    BR129 = 1, /** BR 129 */
    BR210 = 2, /** BR 210 or BR 212 */
    BR202 = 3, /** BR 202 or BR 204 */
    BR220 = 4, /** BR 220 */
    BR170 = 5, /** BR 170 */
    BR203 = 6, /** BR 203 */
    BR168 = 7, /** BR 168 */
    BR163 = 8, /** BR 163 */
    BR208 = 9, /** BR 208 */
    BR463 = 10, /** BR 463 */
    BR215 = 11, /** BR 215 */
    BR230 = 12, /** BR 230 */
    BR211 = 13, /** BR 211 */
    BR209 = 14, /** BR 209 */
    BR461 = 15, /** BR 461 */
    BR240 = 16, /** BR 240 */
    BR251 = 17, /** BR 251 */
    BR171 = 18, /** BR 171 */
    BR164 = 19, /** BR 164 */
    BR169 = 20, /** BR 169 or BR 245 */
    BR199 = 21, /** BR 199 */
    BR216 = 22, /** BR 216 */
    BR219 = 23, /** BR 219 */
    BR454 = 24, /** BR 454 (z-car) */
    NCV2 = 25, /** NCV2 */
    VITO = 26, /** V-Class */
    SPRINTER = 27, /** Sprinter */
    NCV3 = 28, /** NCV3 */
    NCV1 = 29, /** NCV1 */
    REST = 30, /** all other BR */
    SNV = 31, /** code does not exist */
};

enum class MS_608H_FCOD_KAR {
    W = 0, /** W */
    V = 1, /** V */
    C = 2, /** C */
    S = 3, /** S */
    A = 4, /** A */
    R = 5, /** R */
    SS = 6, /** SS */
    SNV = 7, /** code does not exist */
};

enum class MS_608H_FCOD_MOT {
    M272E35 = 0, /** M272 E35 */
    M271E18ML105 = 1, /** M271 E18 ML red. (105 kW) */
    M271E18ML120 = 2, /** M271 E18 ML (120 kW) */
    M112E37 = 3, /** M112 E37 */
    M272E25 = 4, /** M272 E25 */
    M272E30 = 5, /** M272 E30 */
    M112E28 = 7, /** M112 E28 */
    M112E32 = 8, /** M112 E32 */
    M273E46 = 10, /** M273 E46 */
    M273E55 = 11, /** M273 E55 */
    M112E26 = 12, /** M112 E26 */
    M113E43 = 13, /** M113 E43 */
    M113E50 = 14, /** M113 E50 */
    M271E18ML140 = 18, /** M271 E18 ML */
    M271DE18ML105 = 19, /** M271 DE18 ML red. (105 kW) */
    M271DE18ML125 = 20, /** M271 DE18 ML (125 kW) */
    M111E_E23ML = 22, /** M111E E23 ML */
    M111E_E20 = 23, /** M111E E20 */
    M111E_E20ML = 24, /** M111E E20 ML */
    M112E32_140 = 25, /** M112 E32 red. (140 kW) */
    M266E20ATL = 26, /** M266 E20 ATL */
    M266E15 = 27, /** M266 E15 */
    M266E17 = 28, /** M266 E17 */
    M266E20 = 29, /** M266 E20 */
    M275E55 = 30, /** M275 E55 or M285 E55 */
    M137E58 = 31, /** M137 E58 */
    OM640DE20LA60 = 32, /** OM 640 DE20 LA (60 kW) */
    OM640DE20LA80 = 34, /** OM 640 DE20 LA (80 kW) */
    OM642DE30LA160 = 35, /** OM642 DE30 LA (155/160 kW) */
    OM640DE20LA100 = 36, /** OM 640 DE20 LA (100 kW) */
    OM613DE32LA = 37, /** OM613 DE32 LA or OM648 DE32 LA */
    OM628DE40LA = 39, /** OM628 DE40 LA */
    OM642DE30LA140 = 40, /** OM642 DE30 LA (140 kW) */
    OM612DE27LA = 43, /** OM612 DE27 LA or OM647 DE27 LA (120/130 kW) */
    OM611DE22LA100 = 44, /** OM611 DE22 LA (105/100 kW) or OM646 DE22 LA (100/105/110 kW) */
    OM611DE22LA85 = 45, /** OM611 DE22 LA (85 kW) or OM646 DE22 LA (90 kW) */
    OM611DE22LA75 = 46, /** OM611 DE22 LA (75 kW) or OM646 DE22 LA (75 kW) */
    M134E11 = 64, /** M134 E11 (3A91) */
    M135E13 = 65, /** M135 E13 (4A90) */
    M135E15 = 66, /** M135 E15 (4A91) */
    M135E15ATL = 67, /** M135 E15 ATL */
    M272DE25 = 68, /** M272 DE25 */
    M272DE30 = 69, /** M272 DE30 */
    M272DE35 = 70, /** M272 DE35 */
    M273DE46 = 71, /** M273 DE46 */
    M273DE55 = 72, /** M273 DE55 */
    M271E18MLATTR115 = 79, /** M271 E18 ML Attr. (115kW) */
    M271E18MLATTR141 = 80, /** M271 E18 ML Attr. (141kW) */
    OM629DE40LA = 96, /** OM629 DE40 LA */
    OM642DE30LARED140 = 99, /** OM642 DE30 LA red. (140kW) */
};

enum class MS_608H_PFW {
    OK = 0, /** No warning */
    PFW1 = 1, /** Warning filter closed, level 1 */
    PFW2 = 2, /** Warning filter closed, level 2 */
    SNV = 3, /** signal not available */
};




typedef union {
    uint8_t bytes[8];
    uint64_t raw;

    // Sets engine coolant temperature
    void set_T_MOT(uint8_t value){ raw = (raw & 0x00ffffffffffffff) | ((uint64_t)value & 0xff) << 56; }
    // Gets engine coolant temperature
    uint8_t get_T_MOT() { return raw >> 56 & 0xff; }

    // Sets intake air temperature
    void set_T_LUFT(uint8_t value){ raw = (raw & 0xff00ffffffffffff) | ((uint64_t)value & 0xff) << 48; }
    // Gets intake air temperature
    uint8_t get_T_LUFT() { return raw >> 48 & 0xff; }

    // Sets vehicle code series
    void set_MS_608H_FCOD_BR(uint8_t value){ raw = (raw & 0xffffe0ffffffffff) | ((uint64_t)value & 0x1f) << 40; }
    // Gets vehicle code series
    MS_608H_FCOD_BR get_FCOD_BR() { return (MS_608H_FCOD_BR)(raw >> 40 & 0x1f); }

    // Sets vehicle code body
    void set_MS_608H_FCOD_KAR(uint8_t value){ raw = (raw & 0xffff1fffffffffff) | ((uint64_t)value & 0x7) << 45; }
    // Gets vehicle code body
    MS_608H_FCOD_KAR get_FCOD_KAR() { return (MS_608H_FCOD_KAR)(raw >> 45 & 0x7); }

    // Sets Vehicle code motor 7Bit, Bit0-5 (Bit6 -> Signal FCOD_MOT6)
    void set_MS_608H_FCOD_MOT(uint8_t value){ raw = (raw & 0xffffffc0ffffffff) | ((uint64_t)value & 0x3f) << 32; }
    // Gets Vehicle code motor 7Bit, Bit0-5 (Bit6 -> Signal FCOD_MOT6)
    MS_608H_FCOD_MOT get_FCOD_MOT() { return (MS_608H_FCOD_MOT)(raw >> 32 & 0x3f); }

    // Sets transmission control not available
    void set_GS_NVH(bool value){ raw = (raw & 0xffffffbfffffffff) | ((uint64_t)value & 0x1) << 38; }
    // Gets transmission control not available
    bool get_GS_NVH() { return raw >> 38 & 0x1; }

    // Sets Vehicle code engine with 7 bits, bit 6
    void set_FCOD_MOT6(bool value){ raw = (raw & 0xffffff7fffffffff) | ((uint64_t)value & 0x1) << 39; }
    // Gets Vehicle code engine with 7 bits, bit 6
    bool get_FCOD_MOT6() { return raw >> 39 & 0x1; }

    // Sets Fixed maximum speed
    void set_V_MAX_FIX(uint8_t value){ raw = (raw & 0xffffffff00ffffff) | ((uint64_t)value & 0xff) << 24; }
    // Gets Fixed maximum speed
    uint8_t get_V_MAX_FIX() { return raw >> 24 & 0xff; }

    // Sets consumption
    void set_VB(short value){ raw = (raw & 0xffffffffff0000ff) | ((uint64_t)value & 0xffff) << 8; }
    // Gets consumption
    short get_VB() { return raw >> 8 & 0xffff; }

    // Sets Particle filter correction offset FMMOTMAX
    void set_PFKO(uint8_t value){ raw = (raw & 0xfffffffffffffff0) | ((uint64_t)value & 0xf) << 0; }
    // Gets Particle filter correction offset FMMOTMAX
    uint8_t get_PFKO() { return raw >> 0 & 0xf; }

    // Sets switch on additional consumer
    void set_ZVB_EIN_MS(bool value){ raw = (raw & 0xffffffffffffffef) | ((uint64_t)value & 0x1) << 4; }
    // Gets switch on additional consumer
    bool get_ZVB_EIN_MS() { return raw >> 4 & 0x1; }

    // Sets Particle filter warning
    void set_MS_608H_PFW(uint8_t value){ raw = (raw & 0xffffffffffffff9f) | ((uint64_t)value & 0x3) << 5; }
    // Gets Particle filter warning
    MS_608H_PFW get_PFW() { return (MS_608H_PFW)(raw >> 5 & 0x3); }

    // Sets switch on additional water pump
    void set_ZWP_EIN_MS(bool value){ raw = (raw & 0xffffffffffffff7f) | ((uint64_t)value & 0x1) << 7; }
    // Gets switch on additional water pump
    bool get_ZWP_EIN_MS() { return raw >> 7 & 0x1; }

    /** Imports the frame data from a source */
    void import_frame(uint32_t cid, uint8_t* data, uint8_t len) {
        if (cid == MS_608_ID) {
            for (int i = 0; i < len; i++) {
                bytes[7-i] = data[i];
            }
        }
    }

    /** Exports the frame data to a destination */
    void export_frame(uint32_t* cid, uint8_t* data, uint8_t* len) {
        *cid = MS_608_ID;
        *len = 8;
        for (int i = 0; i < *len; i++) {
            data[i] = bytes[7-i];
        }
    }
} MS_608;

#endif
