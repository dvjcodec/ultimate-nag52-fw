#ifndef SBW_232H_H_
#define SBW_232H_H_

/**
 * AUTOGENERATED BY gen_unions.py
*/
#include <stdint.h>

#define SBW_232_ID 0x0232



enum class SBW_232H_LRT_PM3 {
    NBET = 0, /** Not actuated */
    PLUS = 1, /** "+" pressed */
    MINUS = 2, /** "-" pressed */
    PLUS_MINUS = 3, /** "+" and "-" pressed */
    NOT_DEFINED1 = 4, /** not defined */
    NOT_DEFINED2 = 5, /** not defined */
    NOT_DEFINED3 = 6, /** not defined */
    SNV = 7, /** signal not available */
};

enum class SBW_232H_SID_SBW {
    EWM = 0, /** EWM */
    MRM = 1, /** MRM */
    NOT_DEFINED1 = 2, /** not defined */
    NOT_DEFINED2 = 3, /** not defined */
};

enum class SBW_232H_SBWB_ST_RND {
    IDLE = 0, /** SBW control element in rest position */
    R = 1, /** SBW control element in "R" */
    N_OBEN = 2, /** SBW control element in "N above" */
    N_UNTEN = 4, /** SBW control element in "N down" */
    INIT = 6, /** SBW control element in initialization */
    D = 8, /** SBW control element in "D" */
    SNV = 15, /** signal not available */
};

enum class SBW_232H_SBWB_ST_P {
    IDLE = 0, /** P button in rest position */
    P = 1, /** P button in "P" position */
    INIT = 2, /** P button initialization */
    SNV = 3, /** signal not available */
};

enum class SBW_232H_SBWB_ID {
    GWHST_LR = 0, /** GWHST_LR valid on bit 0..7 (old signal) */
    RES_ALT_FEHLER = 2, /** Reserved old signal "ERROR MRSM" */
    SBWB_ST_P_RND = 3, /** SBWB_ST P, RND valid on bit 0..5 (new signals) */
};




typedef union {
    uint8_t bytes[8];
    uint64_t raw;

    // Sets Steering wheel buttons "+", "-" pressed
    void set_SBW_232H_LRT_PM3(uint8_t value){ raw = (raw & 0xf8ffffffffffffff) | ((uint64_t)value & 0x7) << 56; }
    // Gets Steering wheel buttons "+", "-" pressed
    SBW_232H_LRT_PM3 get_LRT_PM3() { return (SBW_232H_LRT_PM3)(raw >> 56 & 0x7); }

    // Sets sender identification
    void set_SBW_232H_SID_SBW(uint8_t value){ raw = (raw & 0x3fffffffffffffff) | ((uint64_t)value & 0x3) << 62; }
    // Gets sender identification
    SBW_232H_SID_SBW get_SID_SBW() { return (SBW_232H_SID_SBW)(raw >> 62 & 0x3); }

    // Sets Shift-by-wire control element Status RND
    void set_SBW_232H_SBWB_ST_RND(uint8_t value){ raw = (raw & 0xfff0ffffffffffff) | ((uint64_t)value & 0xf) << 48; }
    // Gets Shift-by-wire control element Status RND
    SBW_232H_SBWB_ST_RND get_SBWB_ST_RND() { return (SBW_232H_SBWB_ST_RND)(raw >> 48 & 0xf); }

    // Sets Shift-by-wire control element P button
    void set_SBW_232H_SBWB_ST_P(uint8_t value){ raw = (raw & 0xffcfffffffffffff) | ((uint64_t)value & 0x3) << 52; }
    // Gets Shift-by-wire control element P button
    SBW_232H_SBWB_ST_P get_SBWB_ST_P() { return (SBW_232H_SBWB_ST_P)(raw >> 52 & 0x3); }

    // Sets Shift-by-wire control element identification
    void set_SBW_232H_SBWB_ID(uint8_t value){ raw = (raw & 0xff3fffffffffffff) | ((uint64_t)value & 0x3) << 54; }
    // Gets Shift-by-wire control element identification
    SBW_232H_SBWB_ID get_SBWB_ID() { return (SBW_232H_SBWB_ID)(raw >> 54 & 0x3); }

    // Sets message counter
    void set_BZ232h(uint8_t value){ raw = (raw & 0xffff0fffffffffff) | ((uint64_t)value & 0xf) << 44; }
    // Gets message counter
    uint8_t get_BZ232h() { return raw >> 44 & 0xf; }

    /** Imports the frame data from a source */
    void import_frame(uint32_t cid, uint8_t* data, uint8_t len) {
        if (cid == SBW_232_ID) {
            for (int i = 0; i < len; i++) {
                bytes[7-i] = data[i];
            }
        }
    }

    /** Exports the frame data to a destination */
    void export_frame(uint32_t* cid, uint8_t* data, uint8_t* len) {
        *cid = SBW_232_ID;
        *len = 8;
        for (int i = 0; i < *len; i++) {
            data[i] = bytes[7-i];
        }
    }
} SBW_232;

#endif
